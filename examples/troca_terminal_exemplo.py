#!/usr/bin/env python3
# üîÑ Exemplo de Troca de Terminal - Flexibilidade Total

"""
Este exemplo demonstra como √© f√°cil trocar de terminal no sistema RecoveryTruck.
Mostra a flexibilidade da arquitetura e como o cliente nunca fica "preso" a um terminal.
"""

import asyncio
import os
import sys
from datetime import datetime
from typing import Dict, Any

# Adiciona o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from apps.api.services.payment.terminal.factory import TerminalAdapterFactory
from apps.api.services.payment.terminal.base import PaymentMethod, TransactionRequest

class TrocaTerminalExemplo:
    """Demonstra√ß√£o de troca de terminal"""
    
    def __init__(self):
        self.current_terminal = None
        self.transaction_history = []
    
    async def demonstrar_flexibilidade(self):
        """Demonstra a flexibilidade de troca de terminais"""
        print("üîÑ DEMONSTRA√á√ÉO: FLEXIBILIDADE DE TERMINAIS")
        print("=" * 60)
        
        # Cen√°rio: Cliente come√ßou com Mock, depois quer Sicredi, depois Stone
        cenarios = [
            {
                "nome": "Desenvolvimento/Testes",
                "terminal": "mock",
                "config": {
                    "type": "mock",
                    "simulate_delays": False,
                    "failure_rate": 0.0
                }
            },
            {
                "nome": "Produ√ß√£o com Sicredi",
                "terminal": "sicredi", 
                "config": {
                    "type": "sicredi",
                    "connection_type": "serial",
                    "port": "COM1",
                    "baudrate": 9600,
                    "sicredi": {
                        "merchant_id": "123456789012345",
                        "terminal_id": "RECOVERY1",
                        "pos_id": "001"
                    }
                }
            },
            {
                "nome": "Mudan√ßa para Stone",
                "terminal": "stone",
                "config": {
                    "type": "stone",
                    "connection_type": "serial", 
                    "port": "COM1",
                    "baudrate": 115200,
                    "stone": {
                        "merchant_id": "123456789",
                        "terminal_id": "TERM001"
                    }
                }
            }
        ]
        
        for i, cenario in enumerate(cenarios, 1):
            print(f"\nüìç CEN√ÅRIO {i}: {cenario['nome']}")
            print("-" * 40)
            
            await self.trocar_terminal(cenario['terminal'], cenario['config'])
            await self.testar_funcionalidades()
            
            if i < len(cenarios):
                print(f"\n‚è≥ Cliente decide mudar para {cenarios[i]['nome']}...")
                await asyncio.sleep(1)
        
        print("\n‚úÖ DEMONSTRA√á√ÉO CONCLU√çDA!")
        print("üéØ Resultado: Cliente pode trocar de terminal a qualquer momento!")
    
    async def trocar_terminal(self, tipo: str, config: Dict[str, Any]):
        """Troca o terminal atual"""
        print(f"üîÑ Trocando para terminal: {tipo.upper()}")
        
        try:
            # Desconecta terminal atual se houver
            if self.current_terminal:
                print("   üì§ Desconectando terminal anterior...")
                await self.current_terminal.disconnect()
            
            # Cria novo terminal
            print("   üè≠ Criando novo terminal...")
            self.current_terminal = TerminalAdapterFactory.create_terminal(tipo, config)
            
            # Conecta novo terminal
            print("   üîå Conectando novo terminal...")
            connected = await self.current_terminal.connect()
            
            if connected:
                print(f"   ‚úÖ Terminal {tipo.upper()} conectado com sucesso!")
                
                # Mostra informa√ß√µes do terminal
                try:
                    info = await self.current_terminal.get_terminal_info()
                    print(f"   üìã Modelo: {info.model}")
                    print(f"   üìã Serial: {info.serial_number}")
                except:
                    print("   üìã Informa√ß√µes b√°sicas obtidas")
                
                # Mostra m√©todos suportados
                methods = await self.current_terminal.get_supported_payment_methods()
                print(f"   üí≥ M√©todos suportados: {len(methods)}")
                for method in methods:
                    print(f"      - {method.value}")
                
            else:
                print(f"   ‚ùå Falha na conex√£o com {tipo.upper()}")
                
        except Exception as e:
            print(f"   ‚ùå Erro na troca: {e}")
    
    async def testar_funcionalidades(self):
        """Testa funcionalidades b√°sicas do terminal atual"""
        if not self.current_terminal:
            print("   ‚ö†Ô∏è Nenhum terminal conectado")
            return
        
        print("   üß™ Testando funcionalidades...")
        
        try:
            # Teste 1: Verificar conex√£o
            connected = await self.current_terminal.is_connected()
            print(f"      ‚úÖ Conex√£o: {'OK' if connected else 'FALHA'}")
            
            if not connected:
                return
            
            # Teste 2: Transa√ß√£o de teste
            request = TransactionRequest(
                amount=10.00,
                payment_method=PaymentMethod.CREDIT_CARD,
                installments=1,
                description="Teste de funcionalidade"
            )
            
            transaction_id = await self.current_terminal.start_transaction(request)
            print(f"      ‚úÖ Transa√ß√£o iniciada: {transaction_id[:8]}...")
            
            # Simula processamento
            await asyncio.sleep(0.5)
            
            # Consulta status
            status = await self.current_terminal.get_transaction_status(transaction_id)
            print(f"      ‚úÖ Status: {status.status.value}")
            print(f"      ‚úÖ Valor: R$ {status.amount:.2f}")
            
            # Registra na hist√≥ria
            self.transaction_history.append({
                "terminal": self.current_terminal.__class__.__name__,
                "transaction_id": transaction_id,
                "amount": status.amount,
                "status": status.status.value,
                "timestamp": datetime.now()
            })
            
            # Teste 3: Impress√£o (se suportada)
            try:
                printed = await self.current_terminal.print_custom_text("Teste de impress√£o")
                print(f"      ‚úÖ Impress√£o: {'OK' if printed else 'N/A'}")
            except:
                print("      ‚úÖ Impress√£o: N/A")
                
        except Exception as e:
            print(f"      ‚ùå Erro no teste: {e}")
    
    def mostrar_terminais_disponiveis(self):
        """Mostra terminais dispon√≠veis no sistema"""
        print("\nüìã TERMINAIS DISPON√çVEIS NO SISTEMA")
        print("-" * 40)
        
        available = TerminalAdapterFactory.get_available_terminals()
        
        for terminal, implemented in available.items():
            status = "‚úÖ Implementado" if implemented else "‚è≥ Pendente"
            print(f"   {terminal.upper()}: {status}")
    
    def mostrar_historico_transacoes(self):
        """Mostra hist√≥rico de transa√ß√µes em diferentes terminais"""
        if not self.transaction_history:
            print("\nüìä Nenhuma transa√ß√£o realizada")
            return
        
        print("\nüìä HIST√ìRICO DE TRANSA√á√ïES")
        print("-" * 40)
        
        for i, trans in enumerate(self.transaction_history, 1):
            print(f"   {i}. Terminal: {trans['terminal']}")
            print(f"      ID: {trans['transaction_id'][:8]}...")
            print(f"      Valor: R$ {trans['amount']:.2f}")
            print(f"      Status: {trans['status']}")
            print(f"      Data: {trans['timestamp'].strftime('%H:%M:%S')}")
            print()
    
    def mostrar_vantagens_arquitetura(self):
        """Mostra as vantagens da arquitetura flex√≠vel"""
        print("\nüèÜ VANTAGENS DA ARQUITETURA FLEX√çVEL")
        print("-" * 40)
        
        vantagens = [
            "üîÑ Troca de terminal sem alterar c√≥digo",
            "‚ö° Zero downtime na mudan√ßa",
            "üîß Mesma API para todos os terminais",
            "üìä Hist√≥rico preservado",
            "üõ°Ô∏è Isolamento entre terminais",
            "üöÄ Implementa√ß√£o r√°pida de novos terminais",
            "üí∞ Sem vendor lock-in",
            "üß™ Testes com terminal mock",
            "üìà Escalabilidade garantida",
            "üîí Seguran√ßa mantida"
        ]
        
        for vantagem in vantagens:
            print(f"   {vantagem}")
    
    async def simular_cenario_real(self):
        """Simula um cen√°rio real de mudan√ßa de terminal"""
        print("\nüé¨ CEN√ÅRIO REAL: MUDAN√áA DE FORNECEDOR")
        print("-" * 50)
        
        print("üìÖ Janeiro 2024: Cliente inicia com Sicredi")
        await self.trocar_terminal("sicredi", {
            "type": "sicredi",
            "connection_type": "serial",
            "port": "COM1",
            "sicredi": {
                "merchant_id": "123456789012345",
                "terminal_id": "RECOVERY1"
            }
        })
        
        # Simula uso por alguns meses
        print("\nüíº Processando transa√ß√µes com Sicredi...")
        for i in range(3):
            request = TransactionRequest(
                amount=25.50 + i * 10,
                payment_method=PaymentMethod.DEBIT_CARD,
                installments=1,
                description=f"Servi√ßo {i+1}"
            )
            
            transaction_id = await self.current_terminal.start_transaction(request)
            status = await self.current_terminal.get_transaction_status(transaction_id)
            
            self.transaction_history.append({
                "terminal": "SicrediTerminalAdapter",
                "transaction_id": transaction_id,
                "amount": status.amount,
                "status": status.status.value,
                "timestamp": datetime.now()
            })
            
            await asyncio.sleep(0.2)
        
        print("‚úÖ 3 transa√ß√µes processadas com Sicredi")
        
        print("\nüìÖ Junho 2024: Cliente decide trocar para Stone")
        print("üí° Motivo: Melhores taxas oferecidas pela Stone")
        
        # Troca para Stone
        await self.trocar_terminal("stone", {
            "type": "stone",
            "connection_type": "serial",
            "port": "COM1",
            "stone": {
                "merchant_id": "987654321",
                "terminal_id": "STONE001"
            }
        })
        
        print("\nüíº Processando transa√ß√µes com Stone...")
        for i in range(2):
            request = TransactionRequest(
                amount=30.00 + i * 15,
                payment_method=PaymentMethod.CREDIT_CARD,
                installments=2,
                description=f"Servi√ßo Stone {i+1}"
            )
            
            transaction_id = await self.current_terminal.start_transaction(request)
            status = await self.current_terminal.get_transaction_status(transaction_id)
            
            self.transaction_history.append({
                "terminal": "StoneTerminalAdapter",
                "transaction_id": transaction_id,
                "amount": status.amount,
                "status": status.status.value,
                "timestamp": datetime.now()
            })
            
            await asyncio.sleep(0.2)
        
        print("‚úÖ 2 transa√ß√µes processadas com Stone")
        
        print("\nüéØ RESULTADO:")
        print("   ‚úÖ Mudan√ßa realizada sem problemas")
        print("   ‚úÖ Sistema funcionando normalmente")
        print("   ‚úÖ Hist√≥rico preservado")
        print("   ‚úÖ Zero downtime")
        print("   ‚úÖ Cliente satisfeito com flexibilidade")

async def main():
    """Fun√ß√£o principal do exemplo"""
    print("üîÑ EXEMPLO: FLEXIBILIDADE DE TERMINAIS")
    print("üéØ Demonstrando como o cliente nunca fica 'preso' a um terminal")
    print("=" * 70)
    
    exemplo = TrocaTerminalExemplo()
    
    # Mostra terminais dispon√≠veis
    exemplo.mostrar_terminais_disponiveis()
    
    # Demonstra flexibilidade
    await exemplo.demonstrar_flexibilidade()
    
    # Mostra hist√≥rico
    exemplo.mostrar_historico_transacoes()
    
    # Simula cen√°rio real
    await exemplo.simular_cenario_real()
    
    # Mostra hist√≥rico final
    exemplo.mostrar_historico_transacoes()
    
    # Mostra vantagens
    exemplo.mostrar_vantagens_arquitetura()
    
    print("\n" + "=" * 70)
    print("‚úÖ CONCLUS√ÉO: SISTEMA 100% FLEX√çVEL!")
    print("üéØ Cliente pode trocar de terminal quando quiser")
    print("üí™ Arquitetura preparada para qualquer mudan√ßa")
    print("üöÄ Implementa√ß√£o de novos terminais √© r√°pida e f√°cil")
    print("=" * 70)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë Exemplo interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro no exemplo: {e}")
        import traceback
        traceback.print_exc() 