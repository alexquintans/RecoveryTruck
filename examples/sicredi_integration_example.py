#!/usr/bin/env python3
# üè¶ Exemplo de Integra√ß√£o com Terminal Sicredi

"""
Exemplo pr√°tico de como usar o terminal Sicredi no sistema RecoveryTruck.
Este script demonstra todas as funcionalidades dispon√≠veis.
"""

import asyncio
import os
import sys
from datetime import datetime
from typing import Dict, Any

# Adiciona o diret√≥rio raiz ao path para importa√ß√µes
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from apps.api.services.payment.terminal.sicredi_terminal import SicrediTerminalAdapter
from apps.api.services.payment.terminal.base import (
    PaymentMethod, TransactionRequest, PaymentTerminalError
)

class SicrediIntegrationExample:
    """Exemplo de integra√ß√£o com terminal Sicredi"""
    
    def __init__(self):
        self.terminal = None
        self.config = self._get_config()
    
    def _get_config(self) -> Dict[str, Any]:
        """Obt√©m configura√ß√£o do terminal"""
        return {
            "type": "sicredi",
            "connection_type": os.getenv("TERMINAL_CONNECTION", "serial"),
            "port": os.getenv("TERMINAL_PORT", "COM1"),
            "baudrate": int(os.getenv("TERMINAL_BAUDRATE", "9600")),
            "timeout": int(os.getenv("TERMINAL_TIMEOUT", "30")),
            "retry_attempts": 3,
            "sicredi": {
                "merchant_id": os.getenv("SICREDI_MERCHANT_ID", "123456789012345"),
                "terminal_id": os.getenv("SICREDI_TERMINAL_ID", "RECOVERY1"),
                "pos_id": os.getenv("SICREDI_POS_ID", "001")
            }
        }
    
    async def initialize_terminal(self):
        """Inicializa o terminal Sicredi"""
        print("üè¶ Inicializando Terminal Sicredi...")
        print(f"   - Merchant ID: {self.config['sicredi']['merchant_id']}")
        print(f"   - Terminal ID: {self.config['sicredi']['terminal_id']}")
        print(f"   - Porta: {self.config['port']}")
        print(f"   - Baudrate: {self.config['baudrate']}")
        
        try:
            self.terminal = SicrediTerminalAdapter(self.config)
            print("‚úÖ Terminal Sicredi criado com sucesso")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao criar terminal: {e}")
            return False
    
    async def connect_terminal(self):
        """Conecta com o terminal"""
        print("\nüîå Conectando com terminal...")
        
        try:
            connected = await self.terminal.connect()
            if connected:
                print("‚úÖ Terminal conectado com sucesso")
                
                # Obt√©m informa√ß√µes do terminal
                info = await self.terminal.get_terminal_info()
                print(f"   - Modelo: {info.model}")
                print(f"   - Serial: {info.serial_number}")
                print(f"   - Firmware: {info.firmware_version}")
                
                return True
            else:
                print("‚ùå Falha na conex√£o com terminal")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro na conex√£o: {e}")
            return False
    
    async def test_debit_transaction(self):
        """Testa transa√ß√£o de d√©bito"""
        print("\nüí≥ Testando Transa√ß√£o de D√©bito...")
        
        request = TransactionRequest(
            amount=25.50,
            payment_method=PaymentMethod.DEBIT_CARD,
            installments=1,
            description="Banheira de Gelo - 30min",
            customer_name="Jo√£o Silva",
            customer_document="12345678901"
        )
        
        try:
            # Inicia transa√ß√£o
            transaction_id = await self.terminal.start_transaction(request)
            print(f"‚úÖ Transa√ß√£o iniciada: {transaction_id}")
            print("   üë§ Aguardando cliente inserir cart√£o...")
            
            # Simula aguardar processamento
            await asyncio.sleep(2)
            
            # Consulta status
            status = await self.terminal.get_transaction_status(transaction_id)
            print(f"   Status: {status.status.value}")
            print(f"   Valor: R$ {status.amount:.2f}")
            
            if status.authorization_code:
                print(f"   Autoriza√ß√£o: {status.authorization_code}")
            if status.nsu:
                print(f"   NSU: {status.nsu}")
            if status.card_brand:
                print(f"   Bandeira: {status.card_brand}")
            if status.card_last_digits:
                print(f"   Final do cart√£o: ****{status.card_last_digits}")
            
            # Imprime comprovante se aprovada
            if status.status.value == "approved":
                print("üñ®Ô∏è Imprimindo comprovante...")
                printed = await self.terminal.print_receipt(transaction_id, "customer")
                if printed:
                    print("‚úÖ Comprovante impresso")
                else:
                    print("‚ö†Ô∏è Erro na impress√£o")
            
            return transaction_id
            
        except PaymentTerminalError as e:
            print(f"‚ùå Erro na transa√ß√£o: {e}")
            return None
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")
            return None
    
    async def test_credit_transaction(self):
        """Testa transa√ß√£o de cr√©dito √† vista"""
        print("\nüí≥ Testando Transa√ß√£o de Cr√©dito √† Vista...")
        
        request = TransactionRequest(
            amount=50.00,
            payment_method=PaymentMethod.CREDIT_CARD,
            installments=1,
            description="Bota de Compress√£o - 45min",
            customer_name="Maria Santos"
        )
        
        try:
            transaction_id = await self.terminal.start_transaction(request)
            print(f"‚úÖ Transa√ß√£o iniciada: {transaction_id}")
            print("   üë§ Aguardando cliente inserir cart√£o...")
            
            await asyncio.sleep(2)
            
            status = await self.terminal.get_transaction_status(transaction_id)
            print(f"   Status: {status.status.value}")
            print(f"   Valor: R$ {status.amount:.2f}")
            
            return transaction_id
            
        except Exception as e:
            print(f"‚ùå Erro na transa√ß√£o: {e}")
            return None
    
    async def test_installment_transaction(self):
        """Testa transa√ß√£o parcelada"""
        print("\nüí≥ Testando Transa√ß√£o Parcelada...")
        
        request = TransactionRequest(
            amount=120.00,
            payment_method=PaymentMethod.CREDIT_CARD,
            installments=3,
            description="Pacote Completo - 60min",
            customer_name="Pedro Costa"
        )
        
        try:
            transaction_id = await self.terminal.start_transaction(request)
            print(f"‚úÖ Transa√ß√£o iniciada: {transaction_id}")
            print(f"   üí∞ Valor: R$ {request.amount:.2f} em {request.installments}x")
            print("   üë§ Aguardando cliente inserir cart√£o...")
            
            await asyncio.sleep(2)
            
            status = await self.terminal.get_transaction_status(transaction_id)
            print(f"   Status: {status.status.value}")
            print(f"   Parcelas: {status.installments}x")
            
            return transaction_id
            
        except Exception as e:
            print(f"‚ùå Erro na transa√ß√£o: {e}")
            return None
    
    async def test_contactless_transaction(self):
        """Testa transa√ß√£o contactless"""
        print("\nüì± Testando Transa√ß√£o Contactless...")
        
        request = TransactionRequest(
            amount=15.00,
            payment_method=PaymentMethod.CONTACTLESS,
            installments=1,
            description="Servi√ßo Express"
        )
        
        try:
            transaction_id = await self.terminal.start_transaction(request)
            print(f"‚úÖ Transa√ß√£o iniciada: {transaction_id}")
            print("   üì± Aguardando aproxima√ß√£o do cart√£o/celular...")
            
            await asyncio.sleep(2)
            
            status = await self.terminal.get_transaction_status(transaction_id)
            print(f"   Status: {status.status.value}")
            
            return transaction_id
            
        except Exception as e:
            print(f"‚ùå Erro na transa√ß√£o: {e}")
            return None
    
    async def test_transaction_cancellation(self):
        """Testa cancelamento de transa√ß√£o"""
        print("\nüö´ Testando Cancelamento de Transa√ß√£o...")
        
        request = TransactionRequest(
            amount=30.00,
            payment_method=PaymentMethod.DEBIT_CARD,
            installments=1,
            description="Transa√ß√£o para cancelar"
        )
        
        try:
            # Inicia transa√ß√£o
            transaction_id = await self.terminal.start_transaction(request)
            print(f"‚úÖ Transa√ß√£o iniciada: {transaction_id}")
            
            # Simula delay antes do cancelamento
            await asyncio.sleep(1)
            
            # Cancela transa√ß√£o
            cancelled = await self.terminal.cancel_transaction(transaction_id)
            if cancelled:
                print("‚úÖ Transa√ß√£o cancelada com sucesso")
            else:
                print("‚ùå Falha no cancelamento")
            
            return cancelled
            
        except Exception as e:
            print(f"‚ùå Erro no cancelamento: {e}")
            return False
    
    async def test_custom_printing(self):
        """Testa impress√£o customizada"""
        print("\nüñ®Ô∏è Testando Impress√£o Customizada...")
        
        custom_text = """
        ================================
             RECOVERY TRUCK
        ================================
        
        Obrigado pela prefer√™ncia!
        
        Sistema de autoatendimento
        com pagamento integrado
        
        Data: """ + datetime.now().strftime("%d/%m/%Y %H:%M") + """
        
        ================================
        """
        
        try:
            printed = await self.terminal.print_custom_text(custom_text)
            if printed:
                print("‚úÖ Texto customizado impresso")
            else:
                print("‚ùå Erro na impress√£o customizada")
            
            return printed
            
        except Exception as e:
            print(f"‚ùå Erro na impress√£o: {e}")
            return False
    
    async def test_terminal_configuration(self):
        """Testa configura√ß√£o do terminal"""
        print("\n‚öôÔ∏è Testando Configura√ß√£o do Terminal...")
        
        settings = {
            "timeout": 60,
            "auto_print": True,
            "beep_enabled": True
        }
        
        try:
            configured = await self.terminal.configure_terminal(settings)
            if configured:
                print("‚úÖ Terminal configurado com sucesso")
            else:
                print("‚ùå Erro na configura√ß√£o")
            
            return configured
            
        except Exception as e:
            print(f"‚ùå Erro na configura√ß√£o: {e}")
            return False
    
    async def show_supported_methods(self):
        """Mostra m√©todos de pagamento suportados"""
        print("\nüìã M√©todos de Pagamento Suportados:")
        
        try:
            methods = await self.terminal.get_supported_payment_methods()
            for method in methods:
                print(f"   ‚úÖ {method.value}")
            
        except Exception as e:
            print(f"‚ùå Erro ao obter m√©todos: {e}")
    
    async def disconnect_terminal(self):
        """Desconecta do terminal"""
        print("\nüîå Desconectando terminal...")
        
        try:
            disconnected = await self.terminal.disconnect()
            if disconnected:
                print("‚úÖ Terminal desconectado")
            else:
                print("‚ö†Ô∏è Erro na desconex√£o")
            
            return disconnected
            
        except Exception as e:
            print(f"‚ùå Erro na desconex√£o: {e}")
            return False
    
    async def run_all_tests(self):
        """Executa todos os testes"""
        print("üè¶ EXEMPLO DE INTEGRA√á√ÉO SICREDI")
        print("=" * 50)
        
        # Inicializa√ß√£o
        if not await self.initialize_terminal():
            return
        
        if not await self.connect_terminal():
            return
        
        # Testes de funcionalidades
        await self.show_supported_methods()
        await self.test_terminal_configuration()
        
        # Testes de transa√ß√µes
        await self.test_debit_transaction()
        await self.test_credit_transaction()
        await self.test_installment_transaction()
        await self.test_contactless_transaction()
        
        # Testes de cancelamento e impress√£o
        await self.test_transaction_cancellation()
        await self.test_custom_printing()
        
        # Finaliza√ß√£o
        await self.disconnect_terminal()
        
        print("\n‚úÖ Todos os testes conclu√≠dos!")
        print("üè¶ Integra√ß√£o Sicredi funcionando perfeitamente!")

async def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando exemplo de integra√ß√£o Sicredi...")
    
    # Verifica vari√°veis de ambiente
    required_vars = [
        "SICREDI_MERCHANT_ID",
        "SICREDI_TERMINAL_ID",
        "TERMINAL_PORT"
    ]
    
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print("‚ö†Ô∏è Vari√°veis de ambiente n√£o configuradas:")
        for var in missing_vars:
            print(f"   - {var}")
        print("\nüí° Configure as vari√°veis ou use valores padr√£o para teste")
        print("   Exemplo:")
        print("   export SICREDI_MERCHANT_ID=123456789012345")
        print("   export SICREDI_TERMINAL_ID=RECOVERY1")
        print("   export TERMINAL_PORT=COM1")
        print()
    
    # Executa exemplo
    example = SicrediIntegrationExample()
    await example.run_all_tests()

if __name__ == "__main__":
    # Executa o exemplo
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë Exemplo interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro no exemplo: {e}")
        import traceback
        traceback.print_exc() 