#!/usr/bin/env python3
# üñ®Ô∏è Teste Completo do Sistema de Impress√£o

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import asyncio
import json
from datetime import datetime
from pathlib import Path

# Imports do sistema
from apps.api.services.printer_service import (
    printer_manager, PrinterConfig, PrinterType, PrinterConnection,
    ReceiptData, ReceiptType
)

async def test_printer_service():
    """üß™ Testa o servi√ßo de impress√£o"""
    print("üñ®Ô∏è === TESTE DO SISTEMA DE IMPRESS√ÉO ===\n")
    
    # 1. Configurar impressora virtual para teste
    print("1Ô∏è‚É£ Configurando impressora virtual...")
    
    virtual_config = PrinterConfig(
        name="Test Virtual Printer",
        printer_type=PrinterType.VIRTUAL,
        connection_type=PrinterConnection.FILE,
        paper_width=80,
        chars_per_line=48,
        encoding="utf-8",
        cut_paper=False,
        beep=False
    )
    
    printer_manager.register_printer("test_virtual", virtual_config)
    printer_manager.set_default_printer("test_virtual")
    
    print("‚úÖ Impressora virtual configurada")
    
    # 2. Criar dados de teste para diferentes modalidades
    test_receipts = [
        {
            "name": "Cart√£o de Cr√©dito",
            "data": ReceiptData(
                transaction_id="TXN-CC-20241201-001",
                receipt_type=ReceiptType.CUSTOMER,
                amount=150.75,
                payment_method="credit_card",
                status="approved",
                timestamp=datetime.now(),
                merchant_name="RecoveryTruck Teste",
                merchant_cnpj="12345678901234",
                merchant_address="Rua das Flores, 123 - S√£o Paulo/SP",
                customer_name="Jo√£o Silva",
                customer_cpf="12345678901",
                card_brand="visa",
                card_last_digits="1234",
                installments=3,
                authorization_code="AUTH123456",
                nsu="NSU789012"
            )
        },
        {
            "name": "PIX",
            "data": ReceiptData(
                transaction_id="TXN-PIX-20241201-002",
                receipt_type=ReceiptType.CUSTOMER,
                amount=89.90,
                payment_method="pix",
                status="approved",
                timestamp=datetime.now(),
                merchant_name="RecoveryTruck Teste",
                merchant_cnpj="12345678901234",
                customer_name="Maria Santos",
                customer_cpf="98765432109",
                pix_key="maria@email.com"
            )
        },
        {
            "name": "Boleto",
            "data": ReceiptData(
                transaction_id="TXN-BOL-20241201-003",
                receipt_type=ReceiptType.CUSTOMER,
                amount=250.00,
                payment_method="boleto",
                status="pending",
                timestamp=datetime.now(),
                merchant_name="RecoveryTruck Teste",
                merchant_cnpj="12345678901234",
                customer_name="Carlos Oliveira",
                customer_cpf="11122233344",
                boleto_barcode="12345678901234567890123456789012345678901234",
                boleto_due_date=datetime(2024, 12, 8)
            )
        }
    ]
    
    # 3. Testar impress√£o de cada modalidade
    print("\n2Ô∏è‚É£ Testando impress√£o de comprovantes...")
    
    for i, receipt in enumerate(test_receipts, 1):
        print(f"\nüìÑ Teste {i}: {receipt['name']}")
        
        success = await printer_manager.print_receipt(
            receipt["data"],
            printer_id="test_virtual"
        )
        
        if success:
            print(f"‚úÖ Comprovante {receipt['name']} impresso com sucesso")
        else:
            print(f"‚ùå Falha ao imprimir comprovante {receipt['name']}")
    
    # 4. Testar impress√£o de via do estabelecimento
    print("\n3Ô∏è‚É£ Testando via do estabelecimento...")
    
    merchant_receipt = ReceiptData(
        transaction_id="TXN-MERCHANT-001",
        receipt_type=ReceiptType.MERCHANT,
        amount=99.99,
        payment_method="debit_card",
        status="approved",
        timestamp=datetime.now(),
        merchant_name="RecoveryTruck Teste",
        merchant_cnpj="12345678901234",
        card_brand="mastercard",
        card_last_digits="5678"
    )
    
    success = await printer_manager.print_receipt(merchant_receipt, "test_virtual")
    print("‚úÖ Via do estabelecimento impressa" if success else "‚ùå Falha na via do estabelecimento")
    
    # 5. Listar arquivos gerados
    print("\n4Ô∏è‚É£ Arquivos de comprovante gerados:")
    receipts_dir = Path("receipts")
    if receipts_dir.exists():
        for receipt_file in receipts_dir.glob("receipt_*.txt"):
            print(f"üìÑ {receipt_file.name}")
    
    print("\n‚úÖ Teste do servi√ßo de impress√£o conclu√≠do!")

def show_receipt_samples():
    """üìÑ Mostra exemplos de comprovantes gerados"""
    print("\nüìÑ === EXEMPLOS DE COMPROVANTES GERADOS ===\n")
    
    receipts_dir = Path("receipts")
    if not receipts_dir.exists():
        print("‚ùå Diret√≥rio de comprovantes n√£o encontrado")
        return
    
    receipt_files = list(receipts_dir.glob("receipt_*.txt"))
    if not receipt_files:
        print("‚ùå Nenhum comprovante encontrado")
        return
    
    # Mostrar o √∫ltimo comprovante gerado
    latest_receipt = max(receipt_files, key=lambda f: f.stat().st_mtime)
    
    print(f"üìÑ Exemplo de comprovante ({latest_receipt.name}):")
    print("=" * 50)
    
    try:
        with open(latest_receipt, 'r', encoding='utf-8') as f:
            content = f.read()
            print(content)
    except Exception as e:
        print(f"‚ùå Erro ao ler comprovante: {e}")
    
    print("=" * 50)
    print(f"\nüìä Total de comprovantes gerados: {len(receipt_files)}")

async def main():
    """üöÄ Fun√ß√£o principal de teste"""
    print("üöÄ INICIANDO TESTES DO SISTEMA DE IMPRESS√ÉO")
    print("=" * 60)
    
    try:
        # Teste 1: Servi√ßo de impress√£o b√°sico
        await test_printer_service()
        
        # Mostrar exemplos
        show_receipt_samples()
        
        print("\nüéâ === TESTE CONCLU√çDO COM SUCESSO! ===")
        print("\nüìã Resumo:")
        print("‚úÖ Servi√ßo de impress√£o funcionando")
        print("‚úÖ Suporte a m√∫ltiplos tipos de impressora")
        print("‚úÖ Gera√ß√£o de comprovantes completos")
        print("‚úÖ Formata√ß√£o adequada para diferentes modalidades")
        
        print("\nüìÅ Arquivos gerados:")
        receipts_dir = Path("receipts")
        if receipts_dir.exists():
            for receipt_file in receipts_dir.glob("receipt_*.txt"):
                print(f"   üìÑ {receipt_file}")
        
        print("\nüîß Para usar em produ√ß√£o:")
        print("1. Configure a impressora real no tenant")
        print("2. Instale drivers necess√°rios (pywin32, pyserial, etc.)")
        print("3. Teste conectividade com a impressora")
        print("4. Ajuste configura√ß√µes de papel e encoding")
        
    except Exception as e:
        print(f"\n‚ùå ERRO DURANTE OS TESTES: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
