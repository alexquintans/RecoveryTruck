# üèß Interface Base para Terminais F√≠sicos

from abc import ABC, abstractmethod
from enum import Enum
from typing import Dict, Optional, Any, List, Union
from dataclasses import dataclass, field
from datetime import datetime
import asyncio
import logging

logger = logging.getLogger(__name__)

class TerminalStatus(str, Enum):
    """Status do terminal f√≠sico"""
    DISCONNECTED = "disconnected"      # Desconectado
    CONNECTING = "connecting"          # Conectando
    CONNECTED = "connected"            # Conectado e pronto
    BUSY = "busy"                      # Processando transa√ß√£o
    ERROR = "error"                    # Erro de comunica√ß√£o
    MAINTENANCE = "maintenance"        # Em manuten√ß√£o

class PaymentMethod(str, Enum):
    """M√©todos de pagamento suportados"""
    CREDIT_CARD = "credit_card"
    DEBIT_CARD = "debit_card"
    PIX = "pix"
    CONTACTLESS = "contactless"        # Aproxima√ß√£o/NFC
    VOUCHER = "voucher"                # Vale alimenta√ß√£o/refei√ß√£o
    BOLETO = "boleto"

class TransactionStatus(str, Enum):
    """Status da transa√ß√£o no terminal"""
    PENDING = "pending"                # Aguardando a√ß√£o do cliente
    PROCESSING = "processing"          # Processando
    APPROVED = "approved"              # Aprovada
    DECLINED = "declined"              # Negada
    CANCELLED = "cancelled"            # Cancelada
    ERROR = "error"                    # Erro na transa√ß√£o
    TIMEOUT = "timeout"                # Timeout

@dataclass
class TerminalInfo:
    """Informa√ß√µes do terminal"""
    serial_number: str
    model: str
    firmware_version: str
    battery_level: Optional[int] = None
    signal_strength: Optional[int] = None
    last_transaction: Optional[datetime] = None

@dataclass
class CreditCardConfig:
    """Configura√ß√£o espec√≠fica para cart√£o de cr√©dito"""
    max_installments: int = 12
    min_amount_for_installments: float = 50.0
    brands_accepted: List[str] = field(default_factory=lambda: ["visa", "mastercard", "elo", "amex"])
    allow_contactless: bool = True
    require_signature_above: float = 50.0
    
@dataclass
class DebitCardConfig:
    """Configura√ß√£o espec√≠fica para cart√£o de d√©bito"""
    require_password: bool = True
    max_amount: float = 5000.0
    allow_contactless: bool = True
    contactless_limit: float = 200.0

@dataclass
class PIXConfig:
    """Configura√ß√£o espec√≠fica para PIX"""
    require_cpf_validation: bool = True
    expiration_minutes: int = 30
    allow_change: bool = False
    min_amount: float = 0.01
    max_amount: float = 50000.0
    auto_confirm: bool = True
    qr_code_format: str = "base64"

@dataclass
class ContactlessConfig:
    """Configura√ß√£o espec√≠fica para pagamento por aproxima√ß√£o"""
    max_amount: float = 200.0
    require_pin_above: float = 50.0
    supported_technologies: List[str] = field(default_factory=lambda: ["nfc", "rfid"])

@dataclass
class VoucherConfig:
    """Configura√ß√£o espec√≠fica para vouchers"""
    types_accepted: List[str] = field(default_factory=lambda: ["meal", "food", "fuel"])
    require_cpf: bool = True
    max_amount: float = 1000.0
    validate_balance: bool = True

@dataclass
class BoletoConfig:
    """Configura√ß√£o espec√≠fica para boleto"""
    days_to_expire: int = 3
    fine_percentage: float = 2.0
    interest_per_day: float = 0.033
    min_amount: float = 5.0
    max_amount: float = 10000.0
    allow_discount: bool = True

@dataclass
class PaymentMethodConfigs:
    """Configura√ß√µes consolidadas para todas as modalidades"""
    credit_card: CreditCardConfig = field(default_factory=CreditCardConfig)
    debit_card: DebitCardConfig = field(default_factory=DebitCardConfig)
    pix: PIXConfig = field(default_factory=PIXConfig)
    contactless: ContactlessConfig = field(default_factory=ContactlessConfig)
    voucher: VoucherConfig = field(default_factory=VoucherConfig)
    boleto: BoletoConfig = field(default_factory=BoletoConfig)
    
    @classmethod
    def from_dict(cls, config_dict: Dict[str, Any]) -> 'PaymentMethodConfigs':
        """Cria configura√ß√µes a partir de dicion√°rio"""
        return cls(
            credit_card=CreditCardConfig(**config_dict.get("credit_card", {})),
            debit_card=DebitCardConfig(**config_dict.get("debit_card", {})),
            pix=PIXConfig(**config_dict.get("pix", {})),
            contactless=ContactlessConfig(**config_dict.get("contactless", {})),
            voucher=VoucherConfig(**config_dict.get("voucher", {})),
            boleto=BoletoConfig(**config_dict.get("boleto", {}))
        )

@dataclass
class TransactionRequest:
    """Solicita√ß√£o de transa√ß√£o"""
    amount: float
    payment_method: PaymentMethod
    installments: int = 1
    description: Optional[str] = None
    customer_name: Optional[str] = None
    customer_document: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None
    
    # üÜï Campos espec√≠ficos por modalidade
    # PIX
    pix_key: Optional[str] = None
    pix_expiration_minutes: Optional[int] = None
    
    # Cart√£o
    card_brand: Optional[str] = None
    require_signature: bool = False
    
    # Voucher
    voucher_type: Optional[str] = None
    
    # Boleto
    boleto_due_date: Optional[datetime] = None
    boleto_fine_percentage: Optional[float] = None
    
    def validate_with_config(self, config: PaymentMethodConfigs) -> List[str]:
        """Valida requisi√ß√£o com base nas configura√ß√µes espec√≠ficas"""
        errors = []
        
        if self.payment_method == PaymentMethod.CREDIT_CARD:
            cc_config = config.credit_card
            if self.installments > cc_config.max_installments:
                errors.append(f"M√°ximo {cc_config.max_installments} parcelas permitidas")
            if self.amount < cc_config.min_amount_for_installments and self.installments > 1:
                errors.append(f"Valor m√≠nimo R$ {cc_config.min_amount_for_installments:.2f} para parcelamento")
            if self.card_brand and self.card_brand.lower() not in cc_config.brands_accepted:
                errors.append(f"Bandeira {self.card_brand} n√£o aceita")
                
        elif self.payment_method == PaymentMethod.DEBIT_CARD:
            db_config = config.debit_card
            if self.amount > db_config.max_amount:
                errors.append(f"Valor m√°ximo R$ {db_config.max_amount:.2f} para d√©bito")
                
        elif self.payment_method == PaymentMethod.PIX:
            pix_config = config.pix
            if pix_config.require_cpf_validation and not self.customer_document:
                errors.append("CPF obrigat√≥rio para transa√ß√µes PIX")
            if self.amount < pix_config.min_amount:
                errors.append(f"Valor m√≠nimo R$ {pix_config.min_amount:.2f} para PIX")
            if self.amount > pix_config.max_amount:
                errors.append(f"Valor m√°ximo R$ {pix_config.max_amount:.2f} para PIX")
                
        elif self.payment_method == PaymentMethod.CONTACTLESS:
            cl_config = config.contactless
            if self.amount > cl_config.max_amount:
                errors.append(f"Valor m√°ximo R$ {cl_config.max_amount:.2f} para aproxima√ß√£o")
                
        elif self.payment_method == PaymentMethod.VOUCHER:
            vc_config = config.voucher
            if self.amount > vc_config.max_amount:
                errors.append(f"Valor m√°ximo R$ {vc_config.max_amount:.2f} para voucher")
            if vc_config.require_cpf and not self.customer_document:
                errors.append("CPF obrigat√≥rio para vouchers")
            if self.voucher_type and self.voucher_type not in vc_config.types_accepted:
                errors.append(f"Tipo de voucher {self.voucher_type} n√£o aceito")
                
        elif self.payment_method == PaymentMethod.BOLETO:
            bl_config = config.boleto
            if self.amount < bl_config.min_amount:
                errors.append(f"Valor m√≠nimo R$ {bl_config.min_amount:.2f} para boleto")
            if self.amount > bl_config.max_amount:
                errors.append(f"Valor m√°ximo R$ {bl_config.max_amount:.2f} para boleto")
        
        return errors

@dataclass
class TransactionResponse:
    """Resposta da transa√ß√£o"""
    transaction_id: str
    status: TransactionStatus
    amount: float
    payment_method: PaymentMethod
    authorization_code: Optional[str] = None
    nsu: Optional[str] = None           # N√∫mero Sequencial √önico
    receipt_merchant: Optional[str] = None
    receipt_customer: Optional[str] = None
    card_brand: Optional[str] = None
    card_last_digits: Optional[str] = None
    installments: int = 1
    error_message: Optional[str] = None
    timestamp: datetime = None
    
    # üÜï Campos espec√≠ficos por modalidade
    # PIX
    qr_code: Optional[str] = None
    pix_copy_paste: Optional[str] = None
    pix_expiration: Optional[datetime] = None
    
    # Boleto
    boleto_url: Optional[str] = None
    boleto_barcode: Optional[str] = None
    boleto_due_date: Optional[datetime] = None
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.utcnow()

class PaymentTerminalError(Exception):
    """Exce√ß√£o espec√≠fica para erros de terminal"""
    
    def __init__(self, message: str, error_code: Optional[str] = None, terminal_status: Optional[TerminalStatus] = None):
        super().__init__(message)
        self.error_code = error_code
        self.terminal_status = terminal_status

class TerminalAdapter(ABC):
    """Interface base para adaptadores de terminal f√≠sico"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.status = TerminalStatus.DISCONNECTED
        self.terminal_info: Optional[TerminalInfo] = None
        self.current_transaction: Optional[TransactionResponse] = None
        self._connection = None
        self._status_callbacks: List[callable] = []
        
        # üÜï Configura√ß√µes espec√≠ficas por modalidade
        self.payment_configs = PaymentMethodConfigs.from_dict(
            config.get("payment_method_configs", {})
        )
        
        logger.info(f"üèóÔ∏è Terminal adapter initialized with payment method configs")
    
    # === M√©todos de Conex√£o ===
    
    @abstractmethod
    async def connect(self) -> bool:
        """Conecta com o terminal f√≠sico"""
        pass
    
    @abstractmethod
    async def disconnect(self) -> bool:
        """Desconecta do terminal f√≠sico"""
        pass
    
    @abstractmethod
    async def is_connected(self) -> bool:
        """Verifica se est√° conectado"""
        pass
    
    @abstractmethod
    async def get_terminal_info(self) -> TerminalInfo:
        """Obt√©m informa√ß√µes do terminal"""
        pass
    
    # === M√©todos de Valida√ß√£o ===
    
    def validate_transaction_request(self, request: TransactionRequest) -> List[str]:
        """üÜï Valida requisi√ß√£o de transa√ß√£o com configura√ß√µes espec√≠ficas"""
        errors = []
        
        # Valida√ß√£o b√°sica
        if request.amount <= 0:
            errors.append("Valor deve ser maior que zero")
        
        # Valida√ß√£o espec√≠fica por modalidade
        config_errors = request.validate_with_config(self.payment_configs)
        errors.extend(config_errors)
        
        return errors
    
    def _validate_cpf(self, cpf: str) -> bool:
        """üÜï Valida CPF brasileiro"""
        if not cpf:
            return False
        
        # Remove caracteres n√£o num√©ricos
        cpf = ''.join(filter(str.isdigit, cpf))
        
        # Verifica se tem 11 d√≠gitos
        if len(cpf) != 11:
            return False
        
        # Verifica se n√£o s√£o todos iguais
        if cpf == cpf[0] * 11:
            return False
        
        # Valida√ß√£o dos d√≠gitos verificadores
        def calculate_digit(cpf_partial):
            sum_val = sum(int(cpf_partial[i]) * (len(cpf_partial) + 1 - i) for i in range(len(cpf_partial)))
            remainder = sum_val % 11
            return 0 if remainder < 2 else 11 - remainder
        
        first_digit = calculate_digit(cpf[:9])
        second_digit = calculate_digit(cpf[:10])
        
        return cpf[9] == str(first_digit) and cpf[10] == str(second_digit)

    # === M√©todos de Transa√ß√£o ===
    
    @abstractmethod
    async def start_transaction(self, request: TransactionRequest) -> str:
        """
        Inicia uma transa√ß√£o no terminal
        
        üÜï Inclui valida√ß√£o autom√°tica das configura√ß√µes espec√≠ficas por modalidade
        """
        # Valida√ß√£o autom√°tica antes de iniciar transa√ß√£o
        validation_errors = self.validate_transaction_request(request)
        if validation_errors:
            raise PaymentTerminalError(f"Valida√ß√£o falhou: {'; '.join(validation_errors)}")
        
        pass
    
    @abstractmethod
    async def get_transaction_status(self, transaction_id: str) -> TransactionResponse:
        """Obt√©m status da transa√ß√£o"""
        pass
    
    @abstractmethod
    async def cancel_transaction(self, transaction_id: str) -> bool:
        """Cancela transa√ß√£o em andamento"""
        pass
    
    @abstractmethod
    async def confirm_transaction(self, transaction_id: str) -> TransactionResponse:
        """Confirma transa√ß√£o (para fluxos que requerem confirma√ß√£o)"""
        pass
    
    # === M√©todos de Impress√£o ===
    
    @abstractmethod
    async def print_receipt(self, transaction_id: str, receipt_type: str = "customer") -> bool:
        """Imprime comprovante no terminal"""
        pass
    
    @abstractmethod
    async def print_custom_text(self, text: str) -> bool:
        """Imprime texto customizado"""
        pass
    
    # === M√©todos de Configura√ß√£o ===
    
    @abstractmethod
    async def get_supported_payment_methods(self) -> List[PaymentMethod]:
        """Retorna m√©todos de pagamento suportados"""
        pass
    
    @abstractmethod
    async def configure_terminal(self, settings: Dict[str, Any]) -> bool:
        """Configura par√¢metros do terminal"""
        pass
    
    # === M√©todos de Monitoramento ===
    
    def add_status_callback(self, callback: callable):
        """Adiciona callback para mudan√ßas de status"""
        self._status_callbacks.append(callback)
    
    def remove_status_callback(self, callback: callable):
        """Remove callback de status"""
        if callback in self._status_callbacks:
            self._status_callbacks.remove(callback)
    
    async def _notify_status_change(self, old_status: TerminalStatus, new_status: TerminalStatus):
        """Notifica mudan√ßa de status"""
        logger.info(f"üîÑ Terminal status changed: {old_status} ‚Üí {new_status}")
        
        for callback in self._status_callbacks:
            try:
                if asyncio.iscoroutinefunction(callback):
                    await callback(old_status, new_status, self)
                else:
                    callback(old_status, new_status, self)
            except Exception as e:
                logger.error(f"‚ùå Error in status callback: {e}")
    
    def _set_status(self, new_status: TerminalStatus):
        """Define novo status e notifica callbacks"""
        if self.status != new_status:
            old_status = self.status
            self.status = new_status
            asyncio.create_task(self._notify_status_change(old_status, new_status))
    
    # === M√©todos Utilit√°rios ===
    
    async def health_check(self) -> Dict[str, Any]:
        """Verifica sa√∫de do terminal"""
        try:
            is_connected = await self.is_connected()
            terminal_info = await self.get_terminal_info() if is_connected else None
            
            return {
                "status": self.status.value,
                "connected": is_connected,
                "terminal_info": terminal_info.__dict__ if terminal_info else None,
                "last_check": datetime.utcnow().isoformat(),
                "config": {
                    "type": self.config.get("type"),
                    "model": self.config.get("model"),
                    "connection": self.config.get("connection_type")
                }
            }
        except Exception as e:
            logger.error(f"‚ùå Health check failed: {e}")
            return {
                "status": TerminalStatus.ERROR.value,
                "connected": False,
                "error": str(e),
                "last_check": datetime.utcnow().isoformat()
            }
    
    async def reset_terminal(self) -> bool:
        """Reseta o terminal (reconecta)"""
        try:
            logger.info("üîÑ Resetting terminal...")
            await self.disconnect()
            await asyncio.sleep(2)  # Aguarda desconex√£o completa
            return await self.connect()
        except Exception as e:
            logger.error(f"‚ùå Terminal reset failed: {e}")
            return False
    
    def __str__(self) -> str:
        return f"{self.__class__.__name__}(status={self.status.value}, config={self.config.get('type', 'unknown')})" 