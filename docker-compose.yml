services:
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/totem
      - JWT_SECRET=your-secret-key
      - OTLP_ENDPOINT=jaeger:4317
      - SERVICE_NAME=totem-api
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=totem
    depends_on:
      - db
      - jaeger
    networks:
      - totem-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=totem
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - totem-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  jaeger:
    image: jaegertracing/all-in-one:1.46
    ports:
      - "16686:16686"  # UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - totem-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:16686/api/services"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./prom_configs:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command: ["--config.file=/etc/prometheus/prometheus.yml"]
    networks:
      - totem-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  alertmanager:
    image: prom/alertmanager:v0.27.0
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager_config:/etc/alertmanager:ro
      - alertmanager_data:/alertmanager
    command: ["--config.file=/etc/alertmanager/alertmanager.yml"]
    environment:
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
    networks:
      - totem-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  node-exporter:
    image: prom/node-exporter:v1.6.1
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - totem-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:10.0.3
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - totem-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  panel:
    build:
      context: .
      dockerfile: apps/panel-client/Dockerfile
    depends_on: [api]
    environment:
      - VITE_API_URL=http://localhost:8000
    ports:
      - "5175:80"          # porta externa â†’ porta nginx
    networks: [totem-network]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3

  totem:
    build:
      context: .
      dockerfile: apps/totem-client/Dockerfile
    depends_on: [api]
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_TENANT_ID=52c6777f-ee24-433b-8e4b-7185950da52e
      - VITE_WS_URL=ws://localhost:8000/ws
      - VITE_MOCK_PAYMENT=true
    ports:
      - "5174:80"
    networks: [totem-network]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
  prometheus_data:
  alertmanager_data:
  grafana_data:

networks:
  totem-network:
    driver: bridge

configs:
  prometheus_cfg:
    file: ./prom_configs/prometheus.yml
  prometheus_rules:
    file: ./prom_configs/alert.rules
  alert_cfg:
    file: ./alertmanager_config/alertmanager.yml 